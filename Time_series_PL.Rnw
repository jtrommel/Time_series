\documentclass[a4paper,11pt]{article}
\usepackage{graphicx} % werken met figuren
\usepackage{gensymb} % werken met wetenschappelijke eenheden\usepackage{geometry}
\usepackage{changepage} % http://ctan.org/pkg/changepage
\usepackage[total={424pt,600pt},top=100pt,left=90pt]{geometry} % instelling van de paginaindeling
\usepackage[dutch,british]{babel} % instelling van de taal (woordsplitsing, spellingscontrole)
\usepackage[parfill]{parskip} % Paragrafen gescheiden door witte lijn en geen inspringing
\usepackage{layout} % Gebruik in het begin om de layout-elementen van het document te verifiÃ«ren
\usepackage[font=small,skip=3pt]{caption} % Minder ruimte tussen figuur/table en ondertitel. Ondertitel klein
\usepackage{capt-of}
\usepackage{indentfirst}
\setlength{\parindent}{0.7cm}
\usepackage{enumitem} % Laat enumerate werken met letters
\usepackage{hyperref}
\usepackage{url}

\DeclareGraphicsExtensions{.pdf,.png,.jpg}

% Alter some LaTeX defaults for better treatment of figures:
% See p.105 of "TeX Unbound" for suggested values.
% See pp. 199-200 of Lamport's "LaTeX" book for details.
%   General parameters, for ALL pages:
    \renewcommand{\topfraction}{0.9}	% max fraction of floats at top
    \renewcommand{\bottomfraction}{0.9}	% max fraction of floats at bottom
%   Parameters for TEXT pages (not float pages):
    \setcounter{topnumber}{2}
    \setcounter{bottomnumber}{2}
    \setcounter{totalnumber}{4}     % 2 may work better
    \renewcommand{\textfraction}{0.1}	% allow minimal text w. figs
%   Parameters for FLOAT pages (not text pages):
    \renewcommand{\floatpagefraction}{0.8}	% require fuller float pages
% N.B.: floatpagefraction MUST be less than topfraction !!
\setcounter{secnumdepth}{3}

\title{Time series - Using regression trees for forecasting double-seasonal time series with trend in R}
\author{Peter Laurinec - annotated by Jan Trommelmans}

\begin{document}
\date{}
\SweaveOpts{concordance=TRUE,prefix.string=TS}
\maketitle

\section{Prepatory work}

\subsection{Installing the necessary libraries}
<<echo=FALSE>>=
library(feather)
library(data.table)
library(rpart)
library(rpart.plot)
library(party)
library(forecast)
library(ggplot2)
library(ggforce)
library(plotly)
library(grid)
library(animation)
library(dplyr)
library(lubridate)
@

Setting the ggplot theme:
<<>>=
theme_ts <- theme(panel.border = element_rect(fill = NA, colour = "gray10"),
                  panel.background = element_blank(),
                  panel.grid.major = element_line(colour = "gray85"),
                  panel.grid.minor = element_line(colour = "gray85"),
                  panel.grid.major.x = element_line(colour = "gray85"),
                  axis.text = element_text(size = 13 , face = "bold"),
                  axis.title = element_text(size = 15 , face = "bold"),
                  plot.title = element_text(size = 16 , face = "bold"),
                  strip.text = element_text(size = 16 , face = "bold"),
                  strip.background = element_rect(colour = "black"),
                  legend.text = element_text(size = 15),
                  legend.title = element_text(size = 16 , face = "bold"),
                  legend.background = element_rect(fill = "white"),
                  legend.key = element_rect(fill = "white"))
@

My functions:

<<>>=
JTR.FFT <- function(signal.df) {
  signal <- signal.df
  names(signal) <- c("t","x")
  N <- nrow(signal)
  Ts <- as.numeric(signal$t[2]-signal$t[1])
  Fs <- 1/Ts
  # Berekening van het double sided en single sided spectrum
  z <- fft(signal$x)
  P2 <- Mod(z/N)
  P1 <- P2[1:((N/2)+1)]
  P1[2:(length(P1)-1)] <- 2*P1[2:(length(P1)-1)]
  freq <- seq(0, (Fs/2)-(Fs/N), Fs/N)
  freqspec <- data.frame(freq=freq,amp=P1[1:(N/2)],arg=Arg(z[1:(N/2)]))
  grens <- max(freqspec$amp)/3
  aantal <- length(freqspec$amp[freqspec$amp>grens])
  resultaat <- data.frame(freq=rep(0,aantal), amp=rep(0,aantal), fasehoek=rep(0,aantal))
  resultaat <- data.frame(freq=freqspec$freq[freqspec$amp>grens],
                          amp=freqspec$amp[freqspec$amp>grens],
                          fasehoek_pi=freqspec$arg[freqspec$amp>grens]/pi)
  return(list("freqspec"=freqspec,"resultaat"=resultaat))
}
@

\subsection{Reading in the data}

17 weeks, each day 48 readings, one per half hour:

<<>>=
DT <- as.data.table(read_feather("Data/DT_load_17weeks.dms"))
n_date <- unique(DT[,date]) # 17 weeks = 119 days
period <- 48 # 1 lezing per half uur per dag
@

\section{Creating the train and the test data set}

The training set is formed by a random choice of 3 weeks of recording (is this case: days 43-63. The test set is the following day, because we only want to make a prediction for one day:

<<>>=
data_train <- DT[date %in% n_date[43:63]]
data_test <- DT[date %in% n_date[64]]
@

Calculating average per week (using sapply):

<<>>=
averages <- data.table(value = rep(sapply(0:2, function(i)
  mean(data_train[((i*period*7)+1):((i+1)*period*7), value])),
  each = period*7),
  date_time = data_train$date_time)
@

Plot of data\_train 3 weeks + average of each week:

<<label=3weeks,fig=TRUE,include=FALSE, echo=FALSE>>=
ggplot(data = data_train, aes(date_time, value)) + 
  geom_line() + 
  geom_line(data = averages, aes(date_time, value),linetype=5, alpha=0.75, size=1.2, color="firebrick2") + 
  labs(x="Date",y="Load (kW)") + 
  theme_ts
@

\begin{center}
\includegraphics[width=0.75\textwidth]{TS-3weeks}
\captionof{figure}{}
\label{fig:3weeks}
\end{center}

\section{STL-decomposition}

A very useful method for visualization and analysis of time series is the \emph{STL decomposition}: S=seasonal, T=trend, L= Loess regression (the method used). We first have to transform our data in a times series object. This requires the parameter ''frequency". In our data\_train this is one week of observations which equals period\*7 readings.

<<>>=
data_ts <- ts(data_train$value, freq=period*7)
@

The stl-command returns an STL-object. In the documentation (\footnote{https://www.rdocumentation.org/packages/stats/versions/3.4.1/topics/stl}) we can find that it has a number of components. The first is called ''time.series" and it contains the decomposition details: the Seasonal value, the Trend value and the Remainder.

<<>>=
decomp_ts <- stl(data_ts, s.window = "periodic", robust = TRUE)$time.series
@

We turn this into a data.table. First the original data (value and date), then new rows with the seasonal component, new rows with the trend component and new rows with the remainder. In a new column we have the words ''original data", ''seasonal", ''trend" and ''remainder" (the last three are the column names of decomp\_ts)

<<>>=
decomp_stl <- data.table(Load = c(data_train$value, as.numeric(decomp_ts)),
                         Date = rep(data_train[,date_time], ncol(decomp_ts) + 1),
                         Type = factor(rep(c("original data", colnames(decomp_ts)), 
                                           each = nrow(decomp_ts)),
                                       levels = c("original data", colnames(decomp_ts))))
@

<<label=stl,fig=TRUE,include=FALSE, echo=FALSE>>=
ggplot(data = decomp_stl, aes(x = Date, y = Load)) + 
  geom_line() +
  facet_grid(Type ~ ., scales = "free_y", switch = "y") +
  labs(x="Date", y=NULL, title="Time Series Decomposition by STL" ) + 
  theme_ts
@

\begin{center}
\includegraphics[width=0.75\textwidth]{TS-stl}
\captionof{figure}{}
\label{fig:stl}
\end{center}

We can see there is a trend: first an increase from week 1 to week 2, then a decrease from week 2 to 3. The remainder does not seem to be exactly ''white noise". Probably there are other elements at play (e.g. weather).

\section{Feature engineering with Fourier}

In our data we have values sampled every half hour for each day. The lenght of the original signal is 3 weeks or 21 days which gives us 21*48=1008=N samples. The Discrete Fourier Transform gives the complex spectrum as:

$X_{p}[k]=\sum \limits_{n=0}^{N-1}x_{p} e^{-j \frac{2 \pi k n}{N}}$

<<>>=
signal <- decomp_stl[decomp_stl$Type=="seasonal",c("Date","Load")]
signal.freq <- JTR.FFT(signal)
signal.freq$resultaat$periode_dag <- 1/(signal.freq$resultaat$freq*48*30)
# reorder the result based on the amplitude
resultaat <- signal.freq$resultaat[order(-signal.freq$resultaat$amp),]
@

<<label=FFT1,fig=TRUE,include=FALSE, echo=FALSE>>=
freqspec <- signal.freq$freqspec
ggplot(data=freqspec) + geom_line(aes(x=freq,y=amp))
@

\begin{center}
\includegraphics[width=0.75\textwidth]{TS-FFT1}
\captionof{figure}{}
\label{fig:FFT1}
\end{center}

\section{Reconstruct the signal}

\subsection{First term: half day= night and day}
<<>>=
recon <- signal
recon$tijd <- ifelse(ymd_hms(recon$Date)=="2016-06-30 0:00:00",
                     0,
                     (as.numeric(rownames(recon))-1)*30)
recon$term1 <- resultaat$amp[1]*cos(2*pi*resultaat$freq[1]*recon$tijd +
                                                  resultaat$fasehoek_pi[1]*pi)
@

<<label=FFT_term1,fig=TRUE,include=FALSE, echo=FALSE>>=
ggplot(data=recon) + 
  geom_line(aes(x=Date,y=Load),color="black") +
  geom_line(aes(x=Date,y=term1, color="red")) +
  labs(title="weekly component")
@

\begin{center}
\includegraphics[width=0.75\textwidth]{TS-FFT_term1}
\captionof{figure}{}
\label{fig:FFT_term1}
\end{center}

\subsection{Second term: weekly}

<<label=FFT_term2,fig=TRUE,include=FALSE, echo=FALSE>>=
recon$term2 <- resultaat$amp[2]*cos(2*pi*resultaat$freq[2]*recon$tijd +
                                                  resultaat$fasehoek_pi[2]*pi)
ggplot(data=recon) + 
  geom_line(aes(x=Date,y=Load),color="black") +
  geom_line(aes(x=Date,y=term1, color="red")) +
  geom_line(aes(x=Date,y=(term1+term2)),color="blue") +
  labs(title="weekly and half-weekly component")
@

\begin{center}
\includegraphics[width=0.75\textwidth]{TS-FFT_term2}
\captionof{figure}{}
\label{fig:FFT_term2}
\end{center}


\end{document}